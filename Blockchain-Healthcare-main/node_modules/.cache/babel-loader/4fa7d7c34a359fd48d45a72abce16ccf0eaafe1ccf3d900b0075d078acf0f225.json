{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhanu\\\\Downloads\\\\Blockchain-Healthcare-main\\\\Blockchain-Healthcare-main\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [hospitalID, setHospitalID] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const navigate = useNavigate();\n  const handleLogin = async e => {\n    e.preventDefault();\n    if (!hospitalID || !password) {\n      setError(\"Please enter both Hospital ID and Password.\");\n      return;\n    }\n    if (typeof window.ethereum === \"undefined\") {\n      setError(\"MetaMask is not installed. Please install it to proceed.\");\n      return;\n    }\n    try {\n      // Prompt MetaMask to connect\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n\n      // Display connected wallet address\n      setWalletAddress(address);\n\n      // Example: Generate a signature for login\n      const message = `Login request for Hospital ID: ${hospitalID}`;\n      const signature = await signer.signMessage(message);\n      console.log(\"Signature:\", signature);\n\n      // Verify login credentials (can be extended with backend validation)\n      const validHospitalID = \"hospital123\";\n      const validPassword = \"password123\";\n      if (hospitalID === validHospitalID && password === validPassword) {\n        // Perform wallet verification (example logic)\n        const validWalletAddress = \"0xe325bC92A6997474Ff8378E81fCD83Ab3128D724\";\n        if (address.toLowerCase() === validWalletAddress.toLowerCase()) {\n          setError(\"\");\n          navigate(\"/healthcare\"); // Redirect on success\n        } else {\n          setError(\"Unauthorized wallet address.\");\n        }\n      } else {\n        setError(\"Invalid Hospital ID or Password.\");\n      }\n    } catch (err) {\n      console.error(\"MetaMask Login Error:\", err);\n      setError(\"Failed to authenticate with MetaMask.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hospital Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Hospital ID\",\n          value: hospitalID,\n          onChange: e => setHospitalID(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), walletAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Wallet: \", walletAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 27\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"BuSV3uOz0i19VzuWRFYOBTJQ5zs=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","ethers","useNavigate","jsxDEV","_jsxDEV","Login","_s","hospitalID","setHospitalID","password","setPassword","error","setError","walletAddress","setWalletAddress","navigate","handleLogin","e","preventDefault","window","ethereum","provider","providers","Web3Provider","send","signer","getSigner","address","getAddress","message","signature","signMessage","console","log","validHospitalID","validPassword","validWalletAddress","toLowerCase","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/bhanu/Downloads/Blockchain-Healthcare-main/Blockchain-Healthcare-main/src/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Login.css\";\r\n\r\nconst Login = () => {\r\n  const [hospitalID, setHospitalID] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!hospitalID || !password) {\r\n      setError(\"Please enter both Hospital ID and Password.\");\r\n      return;\r\n    }\r\n\r\n    if (typeof window.ethereum === \"undefined\") {\r\n      setError(\"MetaMask is not installed. Please install it to proceed.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Prompt MetaMask to connect\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      await provider.send(\"eth_requestAccounts\", []);\r\n      const signer = provider.getSigner();\r\n      const address = await signer.getAddress();\r\n\r\n      // Display connected wallet address\r\n      setWalletAddress(address);\r\n\r\n      // Example: Generate a signature for login\r\n      const message = `Login request for Hospital ID: ${hospitalID}`;\r\n      const signature = await signer.signMessage(message);\r\n\r\n      console.log(\"Signature:\", signature);\r\n\r\n      // Verify login credentials (can be extended with backend validation)\r\n      const validHospitalID = \"hospital123\";\r\n      const validPassword = \"password123\";\r\n\r\n      if (hospitalID === validHospitalID && password === validPassword) {\r\n        // Perform wallet verification (example logic)\r\n        const validWalletAddress = \"0xe325bC92A6997474Ff8378E81fCD83Ab3128D724\";\r\n        if (address.toLowerCase() === validWalletAddress.toLowerCase()) {\r\n          setError(\"\");\r\n          navigate(\"/healthcare\"); // Redirect on success\r\n        } else {\r\n          setError(\"Unauthorized wallet address.\");\r\n        }\r\n      } else {\r\n        setError(\"Invalid Hospital ID or Password.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"MetaMask Login Error:\", err);\r\n      setError(\"Failed to authenticate with MetaMask.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-box\">\r\n        <h1>Hospital Login</h1>\r\n        <form onSubmit={handleLogin}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Hospital ID\"\r\n            value={hospitalID}\r\n            onChange={(e) => setHospitalID(e.target.value)}\r\n            className=\"login-input\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            className=\"login-input\"\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"login-button\">\r\n            Login\r\n          </button>\r\n        </form>\r\n        {walletAddress && <p>Connected Wallet: {walletAddress}</p>}\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}