{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhanu\\\\Downloads\\\\Blockchain-Healthcare-main\\\\Blockchain-Healthcare-main\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Login.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [hospitalID, setHospitalID] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const navigate = useNavigate();\n  const connectMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      setError(\"MetaMask is not installed. Please install it to proceed.\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      setWalletAddress(address);\n\n      // Example logic: Verify wallet address\n      const validWalletAddress = \"0xe325bC92A6997474Ff8378E81fCD83Ab3128D724\"; // Replace with actual allowed address\n      if (address.toLowerCase() === validWalletAddress.toLowerCase()) {\n        setError(\"\"); // Clear any previous errors\n        navigate(\"/healthcare\"); // Redirect to healthcare page\n      } else {\n        setError(\"Unauthorized wallet address.\");\n      }\n    } catch (err) {\n      console.error(err);\n      setError(\"Failed to connect to MetaMask.\");\n    }\n  };\n  const handleLogin = e => {\n    e.preventDefault();\n\n    // Hardcoded authentication credentials (Replace with backend API later)\n    const validHospitalID = \"hospital123\";\n    const validPassword = \"password123\";\n    if (hospitalID === validHospitalID && password === validPassword) {\n      setError(\"\"); // Clear the error\n      navigate(\"/healthcare\"); // Redirect to healthcare page\n    } else {\n      setError(\"Invalid Hospital ID or Password.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hospital Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Hospital ID\",\n          value: hospitalID,\n          onChange: e => setHospitalID(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectMetaMask,\n        className: \"metamask-button\",\n        children: \"Login with MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), walletAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Wallet: \", walletAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 27\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"BuSV3uOz0i19VzuWRFYOBTJQ5zs=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","ethers","useNavigate","jsxDEV","_jsxDEV","Login","_s","hospitalID","setHospitalID","password","setPassword","error","setError","walletAddress","setWalletAddress","navigate","connectMetaMask","window","ethereum","provider","providers","Web3Provider","send","signer","getSigner","address","getAddress","validWalletAddress","toLowerCase","err","console","handleLogin","e","preventDefault","validHospitalID","validPassword","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bhanu/Downloads/Blockchain-Healthcare-main/Blockchain-Healthcare-main/src/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./Login.css\"; // Import the CSS file\r\n\r\nconst Login = () => {\r\n  const [hospitalID, setHospitalID] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const connectMetaMask = async () => {\r\n    if (typeof window.ethereum === \"undefined\") {\r\n      setError(\"MetaMask is not installed. Please install it to proceed.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      await provider.send(\"eth_requestAccounts\", []);\r\n      const signer = provider.getSigner();\r\n      const address = await signer.getAddress();\r\n      setWalletAddress(address);\r\n\r\n      // Example logic: Verify wallet address\r\n      const validWalletAddress = \"0xe325bC92A6997474Ff8378E81fCD83Ab3128D724\"; // Replace with actual allowed address\r\n      if (address.toLowerCase() === validWalletAddress.toLowerCase()) {\r\n        setError(\"\"); // Clear any previous errors\r\n        navigate(\"/healthcare\"); // Redirect to healthcare page\r\n      } else {\r\n        setError(\"Unauthorized wallet address.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(\"Failed to connect to MetaMask.\");\r\n    }\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Hardcoded authentication credentials (Replace with backend API later)\r\n    const validHospitalID = \"hospital123\";\r\n    const validPassword = \"password123\";\r\n\r\n    if (hospitalID === validHospitalID && password === validPassword) {\r\n      setError(\"\"); // Clear the error\r\n      navigate(\"/healthcare\"); // Redirect to healthcare page\r\n    } else {\r\n      setError(\"Invalid Hospital ID or Password.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-box\">\r\n        <h1>Hospital Login</h1>\r\n        <form onSubmit={handleLogin}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Hospital ID\"\r\n            value={hospitalID}\r\n            onChange={(e) => setHospitalID(e.target.value)}\r\n            className=\"login-input\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            className=\"login-input\"\r\n            required\r\n          />\r\n          <button type=\"submit\" className=\"login-button\">\r\n            Login\r\n          </button>\r\n        </form>\r\n        <button onClick={connectMetaMask} className=\"metamask-button\">\r\n          Login with MetaMask\r\n        </button>\r\n        {walletAddress && <p>Connected Wallet: {walletAddress}</p>}\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}